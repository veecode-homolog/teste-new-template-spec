name: Terraform Apply

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  USERNAME: ec2-user
  TERRAFORM_VERSION: "1.10.3"
  
jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}        

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}       
          
      - name: Ansible Vault make file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass.txt
          chmod 600 .vault_pass.txt

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}       
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      - name: Ansible Vault make file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass.txt
          chmod 600 .vault_pass.txt

      - name: Terraform Init
        run: terraform init        

      - name: Write secret to file
        run: |
          echo "${{ secrets.KEYPAIR }}" > cert.pem
          chmod 600 cert.pem    
          
      - name: Terraform Apply
        run: terraform apply --auto-approve    

      - name: Download kube config
        run: |
          mkdir -p ~/.kube
          sleep 5
          HOST=`aws ec2 describe-instances --filters 'Name=tag:Name,Values=teste-new-template-spec' --output text --query 'Reservations[*].Instances[*].PublicIpAddress'`
          scp -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@$HOST:/home/ec2-user/.kube/config ~/.kube/config
        
      - name: Upload kube config
        uses: actions/upload-artifact@v4
        with:
          name: kube-config
          path: ~/.kube/config                      